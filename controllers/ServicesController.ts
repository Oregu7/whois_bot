import { Context } from 'telegraf';

import { Controller, Hears, OnUpdate } from '../shared/core/bot/Controller';
import { Messages } from '../shared/messages';

export class ServicesController extends Controller {

	@Hears(/^üí• –ü–æ–º–æ—â—å —Å –ø—Ä–æ–±–∏–≤–æ–º$/iu)
	static async breakoutHelp(ctx: Context) {
		const { message, extra } = Messages.services.breakoutHelp();

		await ctx.reply(message, extra);
	}

	@OnUpdate('message')
	static async breakoutHelpCommand(ctx: Context, next: () => any) {
		const text = ((ctx.message as any).text ?? '').trim();

		let replyMessage = '';

		switch (text) {
			case '–öp–µ–¥–∏—Ç–Ω—ã–π p–µ–π—Ç–∏–Ω–≥ 1500‚ÇΩ —ç–ª.–¥–æ–∫':
			case '–üp–æ–≤–µp–∫a –Ω–∞ –ëa–Ω–∫—Ä–æ—Ç—Å—Ç–≤o - 1500‚ÇΩ —ç–ª.–¥–æ–∫':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ –ò–ù–ù —Ñ–∏–∑. –ª–∏—Ü–∞ –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏,–µ–≥–æ –§–ò–û, —Ä–µ–≥–∏–æ–Ω ‚ÑπÔ∏è';
				break;
			
			case '–üpo–≤–µ—Ä–∫–∞ –ì–ò–ë–î–î - 3000‚ÇΩ —ç–ª.–¥–æ–∫':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ –§–ò–û, ‚Ññ –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –í–£, —Ä–µ–≥–∏–æ–Ω –≤—ã–¥–∞—á–∏ –∏ ‚Ññ –æ—Ç–¥–µ–ª–µ–Ω–∏—è ‚ÑπÔ∏è';
				break;

			case '–§op–ºa 1 –ø—Äo–≤–µp–∫a –øa—Å–ø–æ—Ä—Ça P–§ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 3500‚ÇΩ —ç–ª.–¥–æ–∫':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ –§–ò–û, ‚Ññ –∏ —Å–µ—Ä–∏—é, –¥–∞—Ç—É –≤—ã–¥–∞—á–∏, –∫–µ–º –≤—ã–¥–∞–Ω, –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ‚ÑπÔ∏è';
				break;

			case '–ù–∞–ª–∏—á–∏–µ co–±—Å—Ç–≤e–Ω–Ωoc—Ç–∏ - –ù–∞–ª–æ–≥–æ–≤–∞—è':
			case '–ù–∞–ª–∏—á–∏–µ co–±—Å—Ç–≤e–Ω–Ωoc—Ç–∏ - –†–æ—Å—Ä–µ–µ—Å—Ç—Ä':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ –§–ò–û –∏ –ò–ù–ù - —Ñ–∏–∑. –ª–∏—Ü–∞  üëâ –ò–ù–ù –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ - —é—Ä. –ª–∏—Ü–∞ ‚ÑπÔ∏è';
				break;

			case '–ö–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ÑπÔ∏è';
				break;

			case '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞—Å—á–µ—Ç–Ω—ã–º —Å—á–µ—Ç–∞–º (–Æ–õ) (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) - –æ—Ç 50 000‚ÇΩ —ç–ª.–¥–æ–∫':
				replyMessage = 'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ –ò–ù–ù –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ - —é—Ä. –ª–∏—Ü–∞ ‚ÑπÔ∏è';
				break;

			default:
				return next();
		}

		const { message, extra } = Messages.services.breakoutHelpMessage(replyMessage);
		await ctx.reply(message, extra);
	}

	@Hears(/^üîô –ù–∞–∑–∞–¥$/iu)
	static async backToMain(ctx: Context) {
		const { message, extra } = Messages.main.start();
		await ctx.reply(message, extra);
	}
}
